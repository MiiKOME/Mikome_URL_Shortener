version: '3.8'

# 生产环境 Docker Compose 配置
services:
  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: url-shortener-backend:latest
    container_name: url-shortener-backend-prod
    restart: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_OPTS=-Xmx1g -Xms512m -XX:+UseG1GC -XX:+PrintGCDetails
      - SERVER_PORT=8080
      # 生产环境数据库配置（使用外部MySQL）
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/urlshortener?useSSL=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=urlshortener
      - SPRING_DATASOURCE_PASSWORD=your_secure_password
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQL8Dialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      # 监控配置
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - url-shortener-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1.5G
        reservations:
          cpus: '1'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # 生产环境API地址（根据实际情况修改）
        - REACT_APP_API_BASE_URL=https://api.yourdomain.com
    image: url-shortener-frontend:latest
    container_name: url-shortener-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - url-shortener-network
    volumes:
      # SSL证书（如果有的话）
      # - ./ssl:/etc/nginx/ssl:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # MySQL 数据库
  db:
    image: mysql:8.0
    container_name: url-shortener-db-prod
    restart: always
    environment:
      MYSQL_DATABASE: urlshortener
      MYSQL_USER: urlshortener
      MYSQL_PASSWORD: your_secure_password
      MYSQL_ROOT_PASSWORD: your_root_password
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - /etc/localtime:/etc/localtime:ro
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pyour_root_password"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis 缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: url-shortener-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --requirepass your_redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Prometheus 监控（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: url-shortener-prometheus-prod
    restart: always
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    networks:
      - url-shortener-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  url-shortener-network:
    driver: bridge
    name: url-shortener-network-prod

volumes:
  mysql_data:
    driver: local
    name: url-shortener-mysql-data
  redis_data:
    driver: local
    name: url-shortener-redis-data
  prometheus_data:
    driver: local
    name: url-shortener-prometheus-data