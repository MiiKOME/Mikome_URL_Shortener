# ===========================================
# 生产环境配置文件
# ===========================================
# 使用方式：java -jar app.jar --spring.profiles.active=prod
# 或设置环境变量：SPRING_PROFILES_ACTIVE=prod

# 服务器配置
server.port=8080

# 应用基础URL - 需要改为实际的域名
app.base-url=https://yourdomain.com

# ===========================================
# MySQL数据库配置（生产环境）
# ===========================================
# 生产环境建议使用MySQL或PostgreSQL等企业级数据库

# MySQL数据库连接配置
# 需要先创建数据库：CREATE DATABASE urlshortener;
spring.datasource.url=jdbc:mysql://localhost:3306/urlshortener?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
spring.datasource.username=root
spring.datasource.password=your_mysql_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# 数据库连接池配置
# HikariCP是SpringBoot默认的连接池，性能优秀
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000

# ===========================================
# JPA/Hibernate生产环境配置
# ===========================================

# 生产环境建议使用update或validate，不要使用create-drop
# update: 更新表结构但保留数据
# validate: 只验证表结构，最安全
spring.jpa.hibernate.ddl-auto=update

# 生产环境关闭SQL语句显示（性能和安全考虑）
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# MySQL方言配置
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Hibernate性能优化
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ===========================================
# 日志配置（生产环境）
# ===========================================

# 生产环境日志级别
logging.level.root=WARN
logging.level.org.example.url_shortener=INFO
logging.level.org.springframework=WARN

# 日志文件配置
logging.file.name=logs/url-shortener.log
logging.file.max-size=10MB
logging.file.max-history=30
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ===========================================
# JSON序列化配置（生产环境）
# ===========================================

# 生产环境不需要美化JSON输出（节省带宽）
spring.jackson.serialization.indent-output=false
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

# ===========================================
# 缓存配置（Redis生产环境）
# ===========================================
# 生产环境建议启用Redis缓存提高性能

# Redis服务器配置
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=your_redis_password
spring.data.redis.timeout=2000ms

# Redis连接池配置
spring.data.redis.jedis.pool.max-active=50
spring.data.redis.jedis.pool.max-idle=20
spring.data.redis.jedis.pool.min-idle=5
spring.data.redis.jedis.pool.max-wait=2000ms

# ===========================================
# 安全配置
# ===========================================

# 禁用H2控制台（生产环境安全考虑）
spring.h2.console.enabled=false

# 跨域配置（生产环境要限制具体域名）
spring.web.cors.allowed-origins=https://yourdomain.com,https://www.yourdomain.com
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=Content-Type,Authorization
spring.web.cors.allow-credentials=true

# ===========================================
# 应用监控配置
# ===========================================
# 生产环境监控配置

# 启用健康检查和指标监控
management.endpoints.web.exposure.include=health,info,metrics
management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=when-authorized

# 应用信息
management.info.env.enabled=true
info.app.name=URL Shortener
info.app.description=A URL shortening service
info.app.version=1.0.0

# ===========================================
# 性能调优配置
# ===========================================

# HTTP压缩
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# Tomcat调优
server.tomcat.max-threads=200
server.tomcat.min-spare-threads=10
server.tomcat.max-connections=10000
server.tomcat.accept-count=100