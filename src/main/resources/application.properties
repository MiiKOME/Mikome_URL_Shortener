# ===========================================
# SpringBoot应用配置文件
# ===========================================
# 这个文件用于配置SpringBoot应用的各种设置
# SpringBoot会自动读取这个文件中的配置项

# 应用基本信息
spring.application.name=URL_Shortener

# 服务器端口配置
# 默认8080端口，可以改为其他端口避免冲突
server.port=8080

# 应用基础URL - 用于生成完整的短链接
# 在生产环境中应该改为实际的域名
app.base-url=http://localhost:8080

# ===========================================
# 数据库配置 - H2内存数据库（开发环境）
# ===========================================
# H2是一个轻量级的Java数据库，非常适合开发和测试
# 优点：无需安装，自动创建表结构，重启后数据清空便于测试

# H2数据库配置
spring.datasource.url=jdbc:h2:mem:urlshortener
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# H2控制台配置 - 可以通过浏览器访问数据库
# 访问地址：http://localhost:8080/h2-console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
# 允许从其他IP访问H2控制台（仅开发环境）
spring.h2.console.settings.web-allow-others=true

# ===========================================
# JPA/Hibernate配置
# ===========================================
# JPA是Java持久化API，Hibernate是其实现

# 自动创建/更新数据库表结构
# create-drop: 应用启动时创建表，关闭时删除表（适合开发测试）
# update: 应用启动时更新表结构，不删除数据（适合生产环境）
# validate: 只验证表结构，不创建或修改（最安全）
spring.jpa.hibernate.ddl-auto=create-drop

# 显示生成的SQL语句（开发时有用，生产环境建议关闭）
spring.jpa.show-sql=true
# 格式化SQL语句，便于阅读
spring.jpa.properties.hibernate.format_sql=true
# 显示SQL参数绑定
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

# JPA方言配置 - 告诉Hibernate使用哪种数据库的SQL方言
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# ===========================================
# 日志配置
# ===========================================
# 配置不同包的日志级别

# 根日志级别
logging.level.root=INFO
# 我们应用的日志级别
logging.level.org.example.url_shortener=DEBUG
# Spring框架的日志级别
logging.level.org.springframework=INFO
# 数据库相关日志
logging.level.org.hibernate=INFO

# 日志输出格式
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ===========================================
# JSON序列化配置
# ===========================================
# 配置Jackson JSON处理器

# 日期格式配置
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8
# 序列化时包含非空字段
spring.jackson.default-property-inclusion=non_null
# 美化JSON输出（开发环境）
spring.jackson.serialization.indent-output=true

# ===========================================
# 缓存配置（Redis - 可选）
# ===========================================
# 如果不使用Redis，可以注释掉这些配置

# Redis服务器地址
#spring.data.redis.host=localhost
#spring.data.redis.port=6379
#spring.data.redis.password=
# Redis连接池配置
#spring.data.redis.jedis.pool.max-active=10
#spring.data.redis.jedis.pool.max-idle=10
#spring.data.redis.jedis.pool.min-idle=1
#spring.data.redis.jedis.pool.max-wait=-1ms

# ===========================================
# 跨域配置
# ===========================================
# 在Controller中已经配置了@CrossOrigin，这里是全局配置的备选方案

# 允许的源域名（生产环境应该设置具体域名）
#spring.web.cors.allowed-origins=*
# 允许的HTTP方法
#spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# 允许的请求头
#spring.web.cors.allowed-headers=*

# ===========================================
# 应用监控配置（Actuator - 可选）
# ===========================================
# Spring Boot Actuator提供应用监控端点

# 启用所有监控端点
#management.endpoints.web.exposure.include=*
# 监控端点的基础路径
#management.endpoints.web.base-path=/actuator
# 显示健康检查详情
#management.endpoint.health.show-details=always
